import tweepy

CONSUMER_TOKEN = '8I0edAMtdTBOQEEUBNf9LbE6c'
CONSUMER_SECRET = 'MZ4kzlZqMM3t9rvGuT0mE4SHhOwBchpFHKOtGSeVA0I882H9RJ'

class TwittTool:

    def __init__(self):
        self.auth = None
        self.access_token = '832313658311065601-eLFDkUYxcxTGjeY9VdLVGQXpJU21Q0H'
        self.access_token_secret = '5BJtiPFVtlYrlxyTyKmziOu14B2E9m8gnyLMN4dv4qSZF'
	self.api = None

    def get_authorization_url(self):
        """Generates the authorizarion URL.
        The user needs to visit the generated url, login to twitter and authorize
        the app to access user's twitter account.
        :Return:
            - String contanining a URL or None in case of an error.
        """
        redirect_url = None
        self.auth = tweepy.OAuthHandler(CONSUMER_TOKEN, CONSUMER_SECRET)
        try:
            redirect_url = self.auth.get_authorization_url()
        except tweepy.TweepError, e:
            print 'Error! Failed to get request token.'
        return redirect_url

    def get_token_and_secret(self, verifier_code):
        """Generate the access-token and access-token-secret for the user who
        just authorized the application.
        :Parameter:
            - `verifier_code`: Verification Pin generated by twitter after the
                user authorized the app.
        :Return:
            - `(token, secret)`: tuple containing key and secret. This should be
                stored and can be used to construct a tweepy api object to
                access user's twitter account.
        """
        try:
            self.auth.get_access_token(verifier_code)
        except tweepy.TweepError:
            print 'Error! Failed to get access token.'
            return None

        self.access_token = self.auth.access_token
        self.access_token_secret = self.auth.access_token_secret
        return (self.access_token, self.access_token_secret)

    def verify_authorization(self):
        """Verify that the user authorizing the application has been done
        successfully.
        """
        auth = tweepy.OAuthHandler(CONSUMER_TOKEN, CONSUMER_SECRET)
        auth.set_access_token(self.access_token, self.access_token_secret)
        api = tweepy.API(auth)
        return api.me()

    def prepare_api(self):
	"""Prepares the api to get ready to post and read statuses. Must be done before posting or reading any statuses.
	"""
	self.api = tweepy.API(self.auth)

    def get_api(self):
	"""Gets the api object for use.
	"""
	return self.api

    def get_me(self):
	"""Gets the author object for the authenticated user.
	"""
	return self.api.me()

    def post_status(self, message):
	"""Posts a status based on the previous user authorized. A user must be authorized 
	prior to using this function.
	:Parameter:
		- 'message': The text to be tweeted to the timeline
	"""
   	self.api.update_status(status=message)

    def reply_to_tweet(self, status_id, message, userList):
	"""Tweets a given message at a specific tweet.
	:Parameter:
		-'status_id': The id of the status to reply to.
		-'message': The text to be tweeted at the user.
		-'userList': The list of user screen names to reply to. Required in order to get the tweet to tweet at a person.
	"""
	atNames = ""
	for author in userList:
		atNames = atNames + "@" + author + " "
	finalMessage = atNames + message
	self.api.update_status(status = finalMessage, in_reply_to_status_id = status_id )

    def get_status_id(self, status):
	"""Gets the id of the status provided.
	:Parameter:
		-'status': The status to find the id of.
	:Return:
		-The id number associated with the status.
	"""
	return status.id

    def read_timeline(self, numStatuses):
	"""Reads the specified number of statuses from the timeline and returns them as strings. 		Processes through the status objects to get text. Returns the statuses as a list.
	:Parameter:
		-'numStatues': The number of statuses to retrieve from the timeline.
	"""
	statusObjects = tweepy.Cursor(self.api.home_timeline).items(numStatuses)
	#self.api.home_timeline(count = numStatuses)
	return statusObjects

    def read_user_tweets(self, screenName, numStatuses):
	"""Reads the tweets of a given user. Returns the statuses as a list of Status objects.
	:Parameter:
		-'screenName': The @ username of the user to retrieve tweets from.
		-'numStatuses': The number of statuses to retrieve from the user
	:Return:
		-List of status object from the specified user
	"""
	return self.api.user_timeline(screen_name = screenName, count = numStatuses)
    
    def get_highest_retweet_status(self, numStatuses):
	"""Finds a list of statuses with the highest retweet amount. Accounts for tweets with the same number of retweets.
	:Parameter:
		-'numStatuses': The number of statuses to grab from the account's timeline.
	:Return:
		-'{"statuses": statusList, "retweets": numRetweets}': Returns a dictionary containing the list of statuses with the most amount of retweets and that number 			of retweets. (Usually returns just one status)
	"""
	statuses = self.api.retweets_of_me(count = numStatuses)
	highestStatus = statuses[0]
	for status in statuses:
		if status.retweet_count > highestStatus.retweet_count:
			highestStatus = status
	highestStatusList = [highestStatus]	
	for status in statuses:
		if status.retweet_count == highestStatus.retweet_count and status.text != highestStatus.text:
			highestStatusList.append(status)
	return {"statuses": highestStatusList, "retweets": highestStatus.retweet_count}

    def get_status_text(self, statusObject):
	""" Gets the text from a given status.
	:Parameter:
		-'statusObject': The status object to get the text from.
	"Return:
		- The text of the given status
	"""	
	return statusObject.text

    def get_status_inReplyTo(self, status):
	"""Gets the user that the tweet is in reply to.
	:Parameter:
		-'status'- The status object to ge tthe screen name from.
	:Return:
		-The screen name of the user that a tweet is in reply to.
	"""
	return status.in_reply_to_screen_name

    def get_status_author(self, statusObject):
	""" Gets the author as a User object from the status object. 
	:Parameter:
		-'statusObject': The object for a status to find the author for.
	:Return:
		-The user who created the tweet.
	"""
	return statusObject.author
	
    def get_user_name(self, author):
	"""Gets the user's name that is present on their twitter profile.
	:Parameter:
		-'author': An user object.
	:Return:
		- The user's name as a string.
	"""
	return author.name

    def get_user_screenName(self, author):
	"""Gets the user's screen name (the user's @ name).
	:Parameter:
		-'author': An user object.
	:Return:
		-The user's screen name.
	"""
	return author.screen_name

    def get_status_datetime(self, status):
	"""Gets the time that the status was posted.
	:Parameter:
		-'status': The status to find the datetime object of.
	:Result:
		-The datetime object of the status.
	"""
	return status.created_at

    def get_readable_time(self, dateTime):
	"""Takes in a time object and returns in as text in a 24 hour clock. 
	:Parameter:
		-'dateTime':A datetime object
	:Return:
		-The time of day as a readable string.
	"""
	return str(dateTime.hour) + ":" + str(dateTime.minute) + ":" + str(dateTime.second)

    def get_readable_date(self, dateTime):
	"""Takes in a date object and returns in as text in mm/dd/yyyy format. 
	:Parameter:
		-'dateTime': A datetime object
	:Return:
		-The day of the datetime object
	"""
	return str(dateTime.month) + "/" + str(dateTime.day) + "/" + str(dateTime.year)

